import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.basemap import Basemap
import numpy as np

#created by Hannah Woody, 2022

# this code is intended to plot the 3d .ray_paths file 
# above a basemap. It should be noted that the indexing
# and basemap boundaries are set for the parameters 
# of the 2020 field campaign. 
# basemap extent should be set to the exact same extent
# as the GROGRAT simulation to properly align with the 
# ray paths

########################################################
###                                                  ###
###                   USER INPUTS                    ###
###                                                  ###
########################################################

FILENAME = "Villarrica.ray_paths_16km"

LOCATION = "villarrica" #(tolten or villarrica)

TIME = "after" #(before, during, or after)

########################################################
###                                                  ###
###             .ray_path file reading               ###
###                                                  ###
########################################################

if LOCATION == 'tolten':
	priorback = np.array([2,4,6,8,10,12,14,16,18,20,22,24,26,28,44])
	priorforward = np.array([1,3,5,7,9,11,13,15,17,19,21,23,25,27,43])
	duringback = np.array([30,32])
	duringforward = np.array([29,31])
	afterback = np.array([34,36,38,40,42,46,48,50,52,54,56,58,60,62,64,66])
	afterforward = np.array([33,35,37,39,41,45,47,49,51,53,55,57,59,61,63,65])

if LOCATION == "villarrica":
	priorback = np.array([2,4])
	priorforward = np.array([1,3])
	afterback = np.array([6,8,10,12,14,16,18,20,22,24])
	afterforward = np.array([5,7,9,11,13,15,17,19,21,23])

f = open(FILENAME, 'r') 
data = f.read()

lines = data.split('\n        ')
fig = plt.figure()
ax = plt.axes(projection='3d')

extent = [250, 295, -55, -20]
bm = Basemap(llcrnrlon=extent[0], llcrnrlat=extent[2],
             urcrnrlon=extent[1], urcrnrlat=extent[3], resolution='l', fix_aspect= False)

backpath = TIME+"back"

if backpath == "afterback":
	backpath = afterback
if backpath == "duringback":
	backpath = duringback
if backpath == "priorback":
	backpath = priorback

for i in backpath:
	wave = lines[i]
	
	j = wave.split('\n')
	k = []
	for i in j:
		k.append(i.split())
		
		x=[]
		y=[]
		z=[]
		t=[]
		n= 0
	for m in k[1:-1]:
		x.append(m[0])
		y.append(m[1])
		z.append(m[2])
		t.append(m[9])
	x= np.array(x).astype('float32')
	y= np.array(y).astype('float32')
	z= np.array(z).astype('float32')
	t= np.array(t).astype('float32')
	p = ax.scatter(x,y,z, c=t, cmap='jet', vmin = 24, vmax=91)


forwardpath = TIME+"forward"

if forwardpath == "afterforward":
	forwardpath = afterforward
if forwardpath == "duringforward":
	forwardpath = duringforward
if forwardpath == "priorforward":
	forwardpath = priorforward

for i in forwardpath:
	wave = lines[i]
	
	j = wave.split('\n')
	k = []
	for i in j:
		k.append(i.split())
		
		x=[]
		y=[]
		z=[]
		t=[]
		n= 0
	for m in k[1:-1]:
		x.append(m[0])
		y.append(m[1])
		z.append(m[2])
		t.append(m[9])
	x= np.array(x).astype('float32')
	y= np.array(y).astype('float32')
	z= np.array(z).astype('float32')
	t= np.array(t).astype('float32')
	p = ax.scatter(x,y,z, c=t, cmap='jet', vmin = 24, vmax=91,alpha=1.0)
	

########################################################
###                                                  ###
###               3D graph plotting                  ###
###                                                  ###
########################################################

cbar = fig.colorbar(p,ax=ax,shrink=0.65)
cbar.ax.tick_params(labelsize=25)
cbar.set_label('Hour since 00:00 UTC on 12/13/2020', fontsize=25)

ax.add_collection3d(bm.drawcoastlines(linewidth=0.25))
ax.add_collection3d(bm.drawcountries(linewidth=0.35))

lon_step = 10
lat_step = 10
meridians = np.arange(extent[0], extent[1] + lon_step, lon_step)
parallels = np.arange(extent[2], extent[3] + lat_step, lat_step)
ax.set_yticks(parallels)
ax.set_yticklabels(parallels,fontsize=22,rotation=350,va="center",ha="left")
ax.set_xticks(meridians)
ax.set_xticklabels(meridians,fontsize=22,rotation=45,va="center",ha="right")
ax.zaxis.set_tick_params(labelsize=22)

ax.set_zlim(0,40)
ax.set_xlabel('Longitude [°]', labelpad=20,fontsize=22)
ax.set_ylabel('Latitude [°]', labelpad=20,fontsize=22)
ax.set_zlabel('Altitude [km]', labelpad=20,fontsize=22)
plt.show()
